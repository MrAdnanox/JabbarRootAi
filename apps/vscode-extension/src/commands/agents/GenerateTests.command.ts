/**
 * @file Commande pour g√©n√©rer des tests unitaires
 * @module GenerateTestsCommand
 * @description Permet de g√©n√©rer des tests unitaires pour un projet JabbarRoot
 * en utilisant le service UnitTestGeneratorService et l'API Gemini.
 * @see {@link UnitTestGeneratorService} pour la logique de g√©n√©ration des tests
 * @see {@link ProjectService} pour la gestion des projets
 */

import * as vscode from 'vscode';
import { ICommandModule, IService, ServiceCollection } from '../../core/interfaces';
import { ProjectService, JabbarProject } from '@jabbarroot/core';
import { UnitTestGeneratorService } from '@jabbarroot/prompt-factory';

/**
 * Helper: Affiche une interface pour s√©lectionner un projet parmi ceux disponibles
 * 
 * @param projectService - Service de gestion des projets
 * @returns {Promise<JabbarProject | undefined>} Le projet s√©lectionn√© ou undefined
 * 
 * @example
 * ```typescript
 * // Helper: S√©lectionne un projet dans une liste
 * const project = await selectProject(projectService);
 * if (project) {
 *   // Faire quelque chose avec le projet
 * }
 * ```
 */
async function selectProject(projectService: ProjectService): Promise<JabbarProject | undefined> {
  const projects = await projectService.getAllProjects();
  if (projects.length === 0) {
    vscode.window.showWarningMessage('JabbarRoot: Aucun projet trouv√©. Veuillez en cr√©er un d\'abord.');
    return undefined;
  }
  if (projects.length === 1) {
    return projects[0];
  }

  const picked = await vscode.window.showQuickPick(
    projects.map(p => ({ label: p.name, description: p.projectRootPath, project: p })),
    { title: 'S√©lectionnez le projet pour g√©n√©rer les tests unitaires' }
  );
  return picked?.project;
}

/**
 * Helper: R√©cup√®re la cl√© API Gemini depuis la configuration VSCode
 * 
 * @returns {string | undefined} La cl√© API ou undefined si non configur√©e
 * 
 * @example
 * ```typescript
 * // Helper: R√©cup√®re la cl√© API de configuration
 * const apiKey = getApiKey();
 * if (!apiKey) {
 *   vscode.window.showErrorMessage('Cl√© API non configur√©e');
 *   return;
 * }
 * ```
 */
function getApiKey(): string | undefined {
  return vscode.workspace.getConfiguration('jabbarroot').get<string>('gemini.apiKey');
}

/**
 * Commande pour g√©n√©rer des tests unitaires pour un projet
 * 
 * ## Fonctionnalit√©s
 * - G√©n√®re des tests unitaires pour un projet s√©lectionn√©
 * - Utilise l'API Gemini pour la g√©n√©ration des tests
 * - Affiche les r√©sultats dans un nouvel onglet
 * 
 * ## Points d'attention
 * - N√©cessite une cl√© API Gemini valide
 * - Peut prendre du temps pour les gros projets
 * - N√©cessite une connexion Internet
 */
export class GenerateTestsCommand implements ICommandModule {
  /**
   * M√©tadonn√©es de la commande
   * @property {string} id - Identifiant unique de la commande
   * @property {string} title - Titre affich√© dans l'interface
   * @property {string} category - Cat√©gorie de la commande
   */
  public readonly metadata = {
    id: 'jabbarroot.test.GenerateTests',
    title: 'G√©n√©rer des tests unitaires',
    category: 'jabbarroot' as const,
  };

  /**
   * D√©pendances requises par la commande
   * @readonly
   */
  public readonly dependencies = [
    'projectService',
    'unitTestGeneratorService'
  ] as const;

  /**
   * Helper: V√©rifie et r√©cup√®re la cl√© API Gemini
   * @returns {Promise<string | undefined>} La cl√© API si valide, undefined sinon
   * 
   * @example
   * ```typescript
   * const apiKey = await this.verifyAndGetApiKey();
   * if (!apiKey) return;
   * ```
   */
  private async verifyAndGetApiKey(): Promise<string | undefined> {
    const apiKey = getApiKey();
    if (!apiKey) {
      const action = await vscode.window.showErrorMessage(
        'Cl√© API Gemini non configur√©e.',
        'Ouvrir les param√®tres'
      );
      
      if (action === 'Ouvrir les param√®tres') {
        await vscode.commands.executeCommand(
          'workbench.action.openSettings', 
          'jabbarroot.gemini.apiKey'
        );
      }
      return undefined;
    }
    return apiKey;
  }

  /**
   * Ex√©cute la commande de g√©n√©ration de tests
   * @param services - Conteneur d'injection de d√©pendances
   * @param context - Contexte d'extension VSCode
   * @returns {Promise<void>}
   * 
   * @example
   * ```typescript
   * const command = new GenerateTestsCommand();
   * await command.execute(services, context);
   * ```
   */
  public async execute(
    services: Map<keyof ServiceCollection, IService>,
    context: vscode.ExtensionContext
  ): Promise<void> {
    const projectService = services.get('projectService') as ProjectService;
    const testGenerator = services.get('unitTestGeneratorService') as UnitTestGeneratorService;
    console.log('JabbLog [generateTests]: Commande appel√©e');
    
    // Helper: V√©rification et r√©cup√©ration de la cl√© API avec gestion d'erreur
    const apiKey = await this.verifyAndGetApiKey();
    if (!apiKey) return; // L'erreur a d√©j√† √©t√© g√©r√©e par le helper
    
    console.log('JabbLog [generateTests]: S√©lection du projet...');
    const project = await selectProject(projectService);
    if (!project) return;
    
    console.log('JabbLog: Projet s√©lectionn√© pour g√©n√©ration de tests', { projectId: project.id });

    console.log('JabbLog: D√©marrage de la g√©n√©ration des tests...');
    // Affichage de la barre de progression
    await vscode.window.withProgress({
      location: vscode.ProgressLocation.Notification,
      title: `JabbarTest: G√©n√©ration des tests unitaires pour "${project.name}"`,
      cancellable: true
    }, async (progress, token) => {
      // Gestion de l'annulation
      token.onCancellationRequested(() => {
        console.log('JabbLog [generateTests]: G√©n√©ration annul√©e par l\'utilisateur');
        throw new Error('G√©n√©ration annul√©e par l\'utilisateur');
      });
      try {
        // √âtape 1: Analyse du code source
        progress.report({ message: 'üîç Analyse du code source...', increment: 10 });
        
        // √âtape 2: G√©n√©ration des tests
        progress.report({ message: '‚öôÔ∏è  G√©n√©ration des tests avec Gemini...', increment: 20 });
        const testContent = await testGenerator.generateTests(project, apiKey);

        // V√©rification du contenu g√©n√©r√©
        if (!testContent || testContent.trim().length === 0) {
          throw new Error('Aucun test g√©n√©r√©. Le r√©sultat est vide.');
        }

        // √âtape 3: Affichage des r√©sultats
        progress.report({ message: 'üìù Pr√©paration des r√©sultats...', increment: 20 });
        
        // D√©tection automatique du langage bas√©e sur l'extension du projet
        const language = project.projectRootPath.endsWith('.js') ? 'javascript' : 'typescript';
        
        const document = await vscode.workspace.openTextDocument({
          content: testContent,
          language: language
        });
        
        // Ouverture du document √† c√¥t√© de l'√©diteur actuel
        await vscode.window.showTextDocument(document, { 
          preview: false, 
          viewColumn: vscode.ViewColumn.Beside,
          preserveFocus: true
        });
        
        // Notification de succ√®s avec action rapide
        const action = await vscode.window.showInformationMessage(
          `Tests unitaires pour "${project.name}" g√©n√©r√©s avec succ√®s !`,
          'Ouvrir le dossier des tests'
        );
        
        // Action suppl√©mentaire si demand√©e
        if (action === 'Ouvrir le dossier des tests') {
          // Impl√©mentation de l'ouverture du dossier des tests
          // (√† adapter selon la structure de votre projet)
        }

      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        
        // Journalisation d√©taill√©e
        console.error('JabbLog [generateTests]: Erreur lors de la g√©n√©ration', { 
          error: errorMessage,
          stack: error instanceof Error ? error.stack : undefined
        });
        
        // Affichage d'un message d'erreur clair
        if (errorMessage.includes('API key')) {
          vscode.window.showErrorMessage(
            'Erreur d\'authentification API. V√©rifiez votre cl√© API Gemini dans les param√®tres.',
            'Ouvrir les param√®tres'
          ).then(selection => {
            if (selection === 'Ouvrir les param√®tres') {
              vscode.commands.executeCommand('workbench.action.openSettings', 'jabbarroot.gemini.apiKey');
            }
          });
        } else {
          vscode.window.showErrorMessage(`Erreur lors de la g√©n√©ration des tests: ${errorMessage}`);
        }
        
        // Relancer l'erreur pour permettre une gestion suppl√©mentaire si n√©cessaire
        throw error;
      }
    });
  }
}

export default new GenerateTestsCommand();
