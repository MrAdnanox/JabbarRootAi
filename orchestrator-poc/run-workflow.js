// JabbarRoot/orchestrator-poc/run-workflow.js (version corrig√©e)

const { McpClient } = require('./mcp-client.js');
const neo4j = require('neo4j-driver');

// --- Points de Configuration ---
const MOCK_SERVER_URL = 'http://localhost:3000';
const NEO4J_URL = 'bolt://localhost:7687';
const NEO4J_USER = 'neo4j';
const NEO4J_PASSWORD = 'DevPassTemp'; // <-- MODIFICATION REQUISE

/**
 * Fonction pour cr√©er un n≈ìud de documentation dans Neo4j.
 * (Cette fonction reste inchang√©e)
 */
async function createDocumentationNode(driver, docData) {
  console.log('\n--- √âTAPE 3: Synth√®se et persistance dans le Graphe de Connaissance ---');
  const session = driver.session();
  try {
    const { libraryId, documentation, source } = docData;
    const result = await session.executeWrite(tx =>
      tx.run(
        `
          MERGE (d:Documentation { id: $libraryId })
          ON CREATE SET d.content = $documentation, d.source = $source, d.createdAt = timestamp(), d.updatedAt = timestamp()
          ON MATCH SET d.content = $documentation, d.source = $source, d.updatedAt = timestamp()
          RETURN d
        `,
        { libraryId, documentation, source }
      )
    );
    const createdNode = result.records[0].get('d');
    console.log('[Neo4j] N≈ìud de documentation cr√©√©/mis √† jour avec succ√®s.');
  } finally {
    await session.close();
  }
}

// <-- AJOUT : Fonction utilitaire pour la temporisation -->
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

/**
 * <-- AJOUT : Fonction pour v√©rifier la connectivit√© avec une politique de r√©essai -->
 * @param {neo4j.Driver} driver L'instance du driver Neo4j.
 * @param {number} retries Le nombre de tentatives.
 * @param {number} delayMs Le d√©lai entre les tentatives.
 */
async function verifyConnectivityWithRetry(driver, retries = 5, delayMs = 2000) {
  for (let i = 1; i <= retries; i++) {
    try {
      await driver.verifyConnectivity();
      console.log('[Neo4j] Connexion √† la base de donn√©es r√©ussie.');
      return; // Succ√®s, on sort de la fonction
    } catch (error) {
      console.warn(`[Neo4j] Tentative de connexion ${i}/${retries} √©chou√©e... Erreur : ${error.message}`);
      if (i === retries) {
        console.error("[Neo4j] Nombre maximum de tentatives atteint. Abandon.");
        throw error; // Relance l'erreur apr√®s la derni√®re tentative
      }
      await delay(delayMs);
    }
  }
}


async function main() {
  console.log('üöÄ [Workflow] D√©marrage du workflow de test "Context7++"...');

  const client = new McpClient(MOCK_SERVER_URL);
  const driver = neo4j.driver(NEO4J_URL, neo4j.auth.basic(NEO4J_USER, NEO4J_PASSWORD));

  try {
    // <-- MODIFICATION : Utilisation de la nouvelle fonction de v√©rification -->
    await verifyConnectivityWithRetry(driver);

    // Le reste du workflow reste identique...
    console.log('\n--- √âTAPE 1: R√©solution de l\'ID de la biblioth√®que ---');
    const resolveResult = await client.call('resolve-library-id', { libraryName: 'redis' });
    const libraryId = resolveResult.id;
    console.log(`[Workflow] ID de biblioth√®que obtenu : ${libraryId}`);

    console.log('\n--- √âTAPE 2: R√©cup√©ration de la documentation ---');
    const docsResult = await client.call('get-library-docs', { libraryId: libraryId });
    console.log(`[Workflow] Documentation re√ßue avec succ√®s !`);

    await createDocumentationNode(driver, {
      libraryId: libraryId,
      documentation: docsResult.documentation,
      source: docsResult.source
    });

    console.log('\n‚úÖ [Workflow] Le cycle complet (Orchestration -> Appel -> Synth√®se) s\'est termin√© avec succ√®s.');

  } catch (error) {
    console.error('\n‚ùå [Workflow] Le workflow a √©chou√© :', error.message);
    process.exit(1);
  } finally {
    await driver.close();
    console.log('[Neo4j] Connexion √† la base de donn√©es ferm√©e.');
  }
}

main();